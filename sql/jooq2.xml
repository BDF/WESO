<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration>
	<!-- Configure the database connection here -->
	<jdbc>
		<driver>com.mysql.jdbc.Driver</driver>
		<!--<url>jdbc:hsqldb:mem:@[your jdbc connection parameters]</url>-->
		<!--<url>jdbc:mysql://localhost:3306/MNEMONICS</url>-->
		<url>jdbc:mysql://localhost:3306</url>
		<user></user>
		<password></password>

		<!-- You can also pass user/password and other JDBC properties in the optional properties tag: -->
		<!--		<properties>
					<property>
						<key>user</key>
						<value>SA</value>
					</property>
					<property>
						<key>password</key>
						<value></value>
					</property>
				</properties>-->
	</jdbc>

	<generator>
		<database>
			<!-- The database dialect from jooq-meta. Available dialects are
				 named org.util.[database].[database]Database. Known values are:

				 org.jooq.util.ase.ASEDatabase (to be used with Sybase ASE)
				 org.jooq.util.cubrid.CUBRIDDatabase
				 org.jooq.util.db2.DB2Database
				 org.jooq.util.derby.DerbyDatabase
				 org.jooq.util.h2.H2Database
				 org.jooq.util.hsqldb.HSQLDBDatabase
				 org.jooq.util.ingres.IngresDatabase
				 org.jooq.util.mysql.MySQLDatabase
				 org.jooq.util.oracle.OracleDatabase
				 org.jooq.util.postgres.PostgresDatabase
				 org.jooq.util.sqlite.SQLiteDatabase
				 org.jooq.util.sqlserver.SQLServerDatabase
				 org.jooq.util.sybase.SybaseDatabase (to be used with Sybase SQL Anywhere)

				 You can also provide your own org.jooq.util.Database implementation
				 here, if your database is currently not supported or if you wish to
				 read the database schema from a file, such as a Hibernate .hbm.xml file -->
			<name>org.jooq.util.mysql.MySQLDatabase</name>

			<!-- All elements that are generated from your schema (A Java regular expression.
				 Use the pipe to separate several expressions) Watch out for
				 case-sensitivity. Depending on your database, this might be
				 important!

				 You can create case-insensitive regular expressions using this syntax: (?i:expr)

				 Whitespace is ignored and comments are possible.
				 -->
			<includes>event_To_Grade|events|grade|guardian|guardian_Event_Choices|guardian_voluteet_choices|student|student_To_Guardian|teacher|teacher_To_Grade|volunteer_Activities</includes>

			<!-- All elements that are excluded from your schema (A Java regular expression.
				 Use the pipe to separate several expressions). Excludes match before
				 includes -->
			<excludes>
				UNUSED_TABLE # This table (unqualified name) should not be generated
				| PREFIX_.* # Objects with a given prefix should not be generated
				| SECRET_SCHEMA\.SECRET_TABLE # This table (qualified name) should not be generated
				| SECRET_ROUTINE # This routine (unqualified name) ...
			</excludes>

			<!-- The schema that is used locally as a source for meta information.
				 This could be your development schema or the production schema, etc
				 This cannot be combined with the schemata element.

				 If left empty, jOOQ will generate all available schemata. See the
				 manual's next section to learn how to generate several schemata -->
			<!--<inputSchema>[your database schema / owner / name]</inputSchema>-->
			<inputschema>weso/</inputschema>
		</database>

		<generate>
			<!-- Generation flags: See advanced configuration properties -->
		</generate>

		<target>
			<!-- The destination package of your generated classes (within the
				 destination directory)

				 jOOQ may append the schema name to this package if generating multiple schemas,
				 e.g. org.jooq.your.packagename.schema1
					  org.jooq.your.packagename.schema2 -->
			<packageName>com.proquest.pqd.canon.dao.jooq</packageName>

			<!-- The destination directory of your generated classes -->
			<directory>/Users/bforeste/software/java/weso</directory>
		</target>
	</generator>
</configuration>
